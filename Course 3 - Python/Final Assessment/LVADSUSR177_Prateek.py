# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1skvPK5Lq8cRNFFaFdvrlGfAhQVeIBJRE
"""

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd

"""#1."""

df = pd.read_csv('/content/Final Dataset - IPL.csv')
df

"""b."""

df.head()

df.shape

df.info()

df.isnull().sum()

# No missing Values Were found in the dataset.

df.describe()

for col in df.select_dtypes(include='object'):
  print(f"\nUnique values for '{col}':")
  print(df[col].unique())

for col in df.select_dtypes(include='object'):
  print(f"\nFrequency of values for '{col}':")
  print(df[col].value_counts())

"""#2."""

missing_values = df.isnull().sum()
total_missing = missing_values.sum()
percent_missing = (missing_values / len(df)) * 100

print(f"Total missing values: {total_missing}")
print(f"Percent missing values: {percent_missing}")

duplicate_rows = df[df.duplicated()]

duplicate_rows

"""#3."""

numerical_columns = df.drop(columns=['match_id']).select_dtypes(include=['int64', 'float64']).columns

for col in numerical_columns:
  print(f"\nMeasures of central tendency and variability for '{col}':")
  print(f"Mean: {df[col].mean():.2f}")
  print(f"Median: {df[col].median():.2f}")
  print(f"Mode: {df[col].mode()[0]}")
  print(f"Range: {df[col].max() - df[col].min():.2f}")
  print(f"Variance: {df[col].var():.2f}")
  print(f"Standard deviation: {df[col].std():.2f}")

"""#4."""

# Histograms
for col in numerical_columns:
  plt.hist(df[col], bins=10, edgecolor='black')
  plt.title(f"Histogram of {col}")
  plt.xlabel(col)
  plt.ylabel("Frequency")
  plt.show()

# Box Plots
for col in numerical_columns:
  sns.boxplot(x=df[col])
  plt.title(f"Box Plot of {col}")
  plt.show()

winner_counts = df['match_winner'].value_counts()

plt.bar(winner_counts.index, winner_counts.values)
plt.xlabel('Match Winner')
plt.ylabel('Count')
plt.title('Match Winner and its Count')
plt.show()

"""#5."""

correlation_matrix = df[['first_ings_score', 'first_ings_wkts', 'second_ings_score',
       'second_ings_wkts', 'margin', 'highscore']].corr()


print(correlation_matrix)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

def analyze_impact(data, group_by_variable, target_variable):
    grouped_data = data.groupby(group_by_variable)[target_variable].value_counts(normalize=True)
    return grouped_data

toss_winner_impact = analyze_impact(df, 'toss_winner', 'match_winner')
print(toss_winner_impact)

toss_decision_impact = analyze_impact(df, 'toss_decision', 'match_winner')
print(toss_decision_impact)

venue_impact = analyze_impact(df, 'venue', 'match_winner')
print(toss_decision_impact)

player_impact = analyze_impact(df, 'player_of_the_match', 'match_winner')
print(toss_decision_impact)

def plot_bar_chart(data, title):
    plt.figure(figsize=(8, 6))
    data.plot(kind='bar')
    plt.title(title)
    plt.show()

plot_bar_chart(toss_winner_impact, 'Impact of Toss Winner on Match Outcome')
plot_bar_chart(toss_decision_impact, 'Impact of Toss Decision on Match Outcome')

"""#6."""

def identify_outliers(data, column):
  IQR = np.percentile(data[column], 75) - np.percentile(data[column], 25)
  lower_bound = np.percentile(data[column], 25) - 1.5 * IQR
  upper_bound = np.percentile(data[column], 75) + 1.5 * IQR
  outliers = data[~((data[column] >= lower_bound) & (data[column] <= upper_bound))]
  return outliers

for col in numerical_columns:
  outliers = identify_outliers(df, col)
  print(f"\nOutliers for '{col}':")
  print(outliers)

for col in numerical_columns:
  sns.boxplot(x=df[col])
  plt.title(f"Box Plot of {col}")
  plt.show()

# following column has outliers: Margin.

# this outlier is not significant so it an be removed.

"""#7."""

df

# @title toss_decision

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('toss_decision').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title venue

from matplotlib import pyplot as plt
import seaborn as sns
df.groupby('venue').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title first_ings_wkts

from matplotlib import pyplot as plt
df['first_ings_wkts'].plot(kind='hist', bins=20, title='first_ings_wkts')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title match_id vs first_ings_score

from matplotlib import pyplot as plt
df.plot(kind='scatter', x='match_id', y='first_ings_score', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

batting_team = df[df['toss_winner'] == df['toss_decision']][['toss_winner', 'match_id']]

batting_teams = df[df['toss_winner'] == df['toss_decision']][['toss_winner', 'match_id']]
batting_teams['batting_wins'] = 1
df = pd.merge(df, batting_teams, on='match_id', how='left')

player_performance_by_stage = df.groupby(['stage', 'player_of_the_match'])['match_winner'].value_counts(normalize=True)
print(player_performance_by_stage)

def analyze_match_outcomes(data, condition_variable, target_variable):
    grouped_data = data.groupby(condition_variable)[target_variable].value_counts(normalize=True)
    return grouped_data

stadium_impact = analyze_match_outcomes(df, 'venue', 'match_winner')
print(stadium_impact)

stage_impact = analyze_match_outcomes(df, 'stage', 'match_winner')
print(stage_impact)

def plot_bar_chart(data, title):
    plt.figure(figsize=(8, 6))
    data.plot(kind='bar')
    plt.title(title)
    plt.show()

plot_bar_chart(stadium_impact, 'Impact of Venue on Match Outcome')

plot_bar_chart(stage_impact, 'Impact of Tournament Stage on Match Outcome')

"""#8."""

player_of_the_match_counts = df['player_of_the_match'].value_counts()
print(f"Most frequent Player of the Match winners:\n{player_of_the_match_counts.head(5)}")

top_scorers = df.groupby('top_scorer')['player_of_the_match'].value_counts(normalize=True)
print(f"\nTop scorers' Player of the Match win rates:\n{top_scorers.head(5)}")

best_bowlers = df.groupby('best_bowling')['player_of_the_match'].value_counts(normalize=True)
print(f"\nBest bowlers' Player of the Match win rates:\n{best_bowlers.head(5)}")

sns.scatterplot(x=df['top_scorer'], y=df['player_of_the_match'])
plt.xlabel('Top Scorer')
plt.ylabel('Player of the Match')
plt.title('Relationship between Top Scores and Player of the Match Awards')
plt.show()

sns.scatterplot(x=df['best_bowling'], y=df['player_of_the_match'])
plt.xlabel('Best Bowler')
plt.ylabel('Player of the Match')
plt.title('Relationship between Best Bowlers and Player of the Match Awards')
plt.show()

"""#9.

"""

# **Summary of Analysis:**

# * **Data Cleaning:**
#     * No missing values or duplicate columns were found.

# * **Descriptive Statistics:**
#     * Mean, median, mode, range, variance, and standard deviation were calculated for numerical columns.

# * **Data Visualization:**
#     * Histograms and box plots were created for numerical columns.
#     * Bar charts were used to visualize the frequency of match winners and the impact of toss winner, toss decision, and venue on match outcomes.
#     * A heatmap was used to visualize the correlation between numerical columns.

# * **Impact Analysis:**
#     * The impact of toss winner, toss decision, venue, and player of the match on match outcomes was analyzed.
#     * Toss winner and toss decision had a significant impact on match outcomes.
#     * Venue and player of the match had a moderate impact on match outcomes.

# * **Outlier Detection:**
#     * Outliers were identified for the "margin" column.
#     * These outliers were not significant and were removed from the dataset.

# * **Team and Individual Performance:**
#     * The performance of teams and individual players was compared.
#     * Teams that won the toss and elected to bat had a higher win rate.
#     * Certain stadiums and tournament stages were associated with higher win rates.

# * **Player of the Match Analysis:**
#     * The most frequent Player of the Match winners were identified.
#     * Top scorers and best bowlers had a higher win rate as Player of the Match.
#     * There was a positive correlation between top scores/best bowling and Player of the Match awards.

# **Overall, the analysis provides insights into the factors influencing match outcomes and the performance of teams and individual players in the Indian Premier League.**