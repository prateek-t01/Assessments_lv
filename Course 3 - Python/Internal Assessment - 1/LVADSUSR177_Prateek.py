# -*- coding: utf-8 -*-
"""LVADSUSR177_Prateek.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CjyamNBGq2BIh2uiwUOJJlCNjPzRiQkX

#1.
"""

len = int(input("Enter Length: "))
width = int(input("Enter Width: "))
area = len*width

if area < 20:
    print("Small Property")
elif area > 20 and area < 40:
    print("Medium Property")
else:
    print("Large Property")

"""#2."""

weight=float(input("Enter your weight in Kg"))
height=float(input("Enter your height in meter"))
BMI=weight/(height)**2
print(f"BMI is {BMI}")

"""#3."""

students={}
Grades = {}
n=int(input("Enter Number of the students: "))
for i in range (n):
  name=input("Enter Students name: ")
  Subject = input("Enter the name of the subject: ")
  scores=input("Enter Score of the student: ")
  grades = input("Enter Grades of the student: ")
  students[name]=scores
  Grades[Subject] = grades
print(students)
print(Grades)

"""#4."""

age = int(input("Enter your Age: "))
if(age<=15):
  print("Minor")
elif(age<=25 and age<=45):
  print("Adult")
else:
  print("Senior")

"""#5."""

for i in range(1,50):
  if(i%2==0):
    print(i,end=" ")
  else:
    pass

"""#6."""

password="My_Password"
while(True):
  p=input("Enter your password")
  if(p==password):
    print("Congrats You Entered Right Password")
    break
  else:
    print("Try Again")
    continue

"""#7."""

def calculate_average(numbers):
    if not numbers:
        return None
    c=sum(numbers)/len(numbers)
    return c

numbers = list(map(int,input("Enter the Customer satisfaction Scores: ").split()))
average = calculate_average(numbers)
print(f"Average of the Customer Satisfaction Scores is {average} .")

"""#8."""

def count_vowel(s):
  count=0
  for i in s:
    if (i=='a' or i=='e' or i=='i'or i=='o' or i=='u'):
      count+=1
  return count
s=input("Enter the Comments")
print(f"Number of vowel in the Comments is {count_vowel(s)}")

"""# 9."""

import datetime

class Event:
    def __init__(self, name, date, details=""):
        self.name = name
        self.date = date
        self.details = details

def create_event(name, date, details=""):
    event = Event(name, date, details)
    events.append(event)

def check_upcoming_events(days=7):
    upcoming_events = []
    today = datetime.datetime.now().date()
    for event in events:
        days_until_event = (event.date - today).days
        if 0 < days_until_event <= days:
            upcoming_events.append((event, days_until_event))
    return upcoming_events

def send_reminder(event, days_until_event, reminder_method="email"):
    print(f"Reminder: '{event.name}' is in {days_until_event} days.")

events = []
create_event("Client Dinner", datetime.date(2024, 4, 25), "Discuss project updates")
create_event("Client Presentation", datetime.date(2024, 5, 1), "Submit report")
create_event("First Pitch", datetime.date(2024, 5, 10), "Deliver Pitch")

upcoming_events = check_upcoming_events()
for event, days_until_event in upcoming_events:
    send_reminder(event, days_until_event)

"""#10."""

n=int(input("Enter the number"))
m=int(input("Enter the other number"))
e=input("Enter other number")
def addition(a,b,c):
    try:
        name_calc = str(input("Enter the name of the calculation: "))
        z=m+e
    except TypeError:
        print("Can't be added non numeric input")
    except ValueError:
        print("The value you entered is not integer")
    z=n+m
    print(name_calc)
    print(f"the sum of the number are {z}")
addition(n,m,e)

"""#11."""

try:
  i=int(input("Enter your poll option (1,2,3,4)"))
except ValueError:
  print("The poll value you entered is not integer")

"""#12."""

def division(a,b):
  try:
    z=a/b
    x=a*b
    y=a+b
    w=a-b
    print("Division: ",z)
    print("Multiplication: ",x)
    print("Addition: ",y)
    print("Subtraction: ",w)
  except ZeroDivisionError:
    print("Number can't be divided by 0")
  except RuntimeError:
    print("Runtime Hampered. Exit the system.")
  except TypeError:
    print("TypeError found, please look into the calculation.")
  except NameError:
    print("NameError found, please look into filename wile saving.")
  except OSError:
    print("OS error Please restart the kernel")
  except ConnectionError:
    print("Database Coinnection Lost. Reconnect!!!")

n=int(input("Enter the first number"))
m=int(input("Enter the second number"))
division(n,m)

"""#13."""

def writting_to_file(filename, content):
    with open(filename, 'w') as file:
        file.write(content)

filename = 'log_file.txt'
content = 'Server loggs: Everything is good and working fine'

writting_to_file(filename, content)
print(f'Server logs "{content}" has been reported into to the file "{filename}".')

"""#14."""

file=open('/content/log_file.txt','r')
reading_from_file=file.readlines()
print(reading_from_file)

"""#15."""

file=open('/content/log_file.txt','w')
writing_on_file=file.writelines("Hello, Everyone! PRateek This side")
writing_on_file=file.writelines("\nMy name is prateek and this is internal Assessment 1")
file.close()
file=open('/content/log_file.txt','r')
reading_from_file=file.readlines()
print(reading_from_file)