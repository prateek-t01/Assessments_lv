# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dMseaZGeBJF82pJ-5dGWF6y7nl0-3TCO

1.
"""

#kmeans clustering
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import MinMaxScaler

data=pd.read_csv("/content/customer_segmentation.csv")
data.head()

data.shape

data.info()

data.describe()

data.isnull().sum()

"""2."""

#handling null values
data.dropna(inplace=True)

#handling duplicates
data.duplicated().sum()

#detecting outliers
plt.figure(figsize=(15,6))
sns.boxplot(data)

data.dtypes

data['Education'].value_counts()

data['Marital_Status'].value_counts()

data['Dt_Customer'].value_counts()

data.drop('Dt_Customer', axis = 1, inplace = True)

"""3."""

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

data['Marital_Status'] = label_encoder.fit_transform(data['Marital_Status'])
data['Education'] = label_encoder.fit_transform(data['Education'])

#handling outlier
import numpy as np
from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(data)
outliers = np.abs(z_scores) > threshold
data = data[~outliers]

data.isna().sum()

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')

# List of columns with null values
columns_with_nulls = data.columns[data.isnull().any()]

# Impute null values with the mean
data[columns_with_nulls] = imputer.fit_transform(data[columns_with_nulls])

data.isnull().sum()

data.shape

sns.heatmap(data.corr(),annot=True,cmap="viridis")

#scaling
scale = MinMaxScaler()
X = scale.fit_transform(data)
X = pd.DataFrame(data)

X.head()

data.drop('ID',axis = 1, inplace = True)

"""4."""

#finding the optimal value of k using elbow method an dsilhoette method
inertia_values = []
silhouette_scores = []
k_values = range(2, 30)

import warnings
warnings.filterwarnings('ignore')

inertia_values = []
silhouette_scores = []
k_values = range(2, 30)

for k in k_values:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X)
    inertia_values.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(X, kmeans.labels_))

print(len(inertia_values))

plt.plot(k_values, inertia_values, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.title('Elbow Curve for Optimal k')
plt.xticks(k_values)
plt.show()

plt.plot(k_values, silhouette_scores, marker='o')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.title('Silhouette Scores for Optimal k')
plt.xticks(k_values)
plt.show()

optimal_k = 10
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(X)

cluster_labels = kmeans.predict(X)

silhouette_avg = silhouette_score(X, cluster_labels)
print("silhouette score: ",silhouette_avg)

data['Cluster'] = kmeans.labels_
cluster_profiles = data.groupby('Cluster').mean()
print(cluster_profiles)

data.columns

data['Cluster'] = kmeans.labels_.astype(int)

data['Cluster'].dtypes

"""5."""

import matplotlib.pyplot as plt

# Create a figure and axes object
fig, ax = plt.subplots()

# Plot each cluster with a different color
for i in range(k):
    ax.scatter(data[data['Cluster'] == i, 0], data[data['Cluster'] == i, 1], s=50, c='rgb'[i])

# Add labels and title
ax.set_title('Clusters of data points')
ax.set_xlabel('X1')
ax.set_ylabel('X2')

# Show the plot
plt.show()

# Add cluster labels to the original data
data['Cluster'] = kmeans.labels_

data.head()

