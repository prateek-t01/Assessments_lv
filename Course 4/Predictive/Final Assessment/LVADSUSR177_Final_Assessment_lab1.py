# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BhdKC8_XGErSOHjGlf21QFUoKJy8WEz3

1.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/Fare prediction.csv')

df

"""2."""

df.isnull().sum()

df.duplicated().sum()

df.shape

df.info()

"""3."""

df.describe

df.isnull().sum()

df.dtypes

df.dropna(inplace=True)


df.drop(columns="key",inplace=True)

df['fare_amount'].isnull().sum()

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(15,6))
sns.boxplot(df)
plt.show()

import numpy as np
from scipy.stats import zscore
threshold = 3.0
z_scores = zscore(df)
outliers = np.abs(z_scores) > threshold
df = df[~outliers]

#handling outlier
from sklearn.impute import SimpleImputer
imp = SimpleImputer(strategy="mean")
df["fare_amount"]=imp.fit_transform(df[["fare_amount"]])
df.isnull().sum()

df.drop('pickup_datetime', axis = 1, inplace = True )

#for feature selection
plt.figure(figsize=(10,6))
sns.heatmap(df.corr(),annot=True,cmap="viridis")
plt.show()

sns.pairplot(df,y_vars="fare_amount")

X=df.drop(columns='fare_amount') #feature
y=df["fare_amount"] #label

#splitting train and test dataset

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

from sklearn.preprocessing import StandardScaler
st_x= StandardScaler()
X_train= st_x.fit_transform(X_train)
X_test= st_x.transform(X_test)

"""Implementing Random Forest Regressor

4.
"""

from sklearn.metrics import mean_squared_error

from sklearn.ensemble import RandomForestRegressor


rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model on the training data
rf_regressor.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = rf_regressor.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

"""5."""

#evaluation of model
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
print("r2_score:",r2_score(y_test,y_pred))
print("mean_squared_error:",mean_squared_error(y_test,y_pred))
print("mean_absolute_error",mean_absolute_error(y_test,y_pred))
print("root_mean_square_eror: ",np.sqrt(mean_squared_error(y_test,y_pred)))

#plotting actual and predicted datapoints
pred_data=pd.DataFrame({"y_test":y_test,"prediction":y_pred})
sns.scatterplot([pred_data["y_test"],pred_data["y_test"]])
sns.scatterplot([pred_data["y_test"],pred_data["prediction"]])