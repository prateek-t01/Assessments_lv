# -*- coding: utf-8 -*-
"""Lab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P4hxYIo8tEedw--HMAMve0ZRZ_K93CWA

1.
"""

# Import necessary libraries
import pandas as pd
from sklearn.ensemble import IsolationForest
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns

#loading dataset
df = pd.read_csv("/content/anomaly_train.csv")
df.head()

df.info()

df.describe()

"""2."""

#handling null values
df.isnull().sum()

#handling duplicate values
df.duplicated().sum()

df["Type"].value_counts()

df["Location"].value_counts()

"""3."""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df["Type"]=le.fit_transform(df["Type"])
df["Location"]=le.fit_transform(df["Location"])

df.drop('TransactionID', axis = 1, inplace = True)

sns.boxplot(df)

sns.heatmap(df.corr(),cmap="viridis",annot=True)

"""4."""

import numpy as np
# Create an instance of the IsolationForest model
model = IsolationForest(contamination='auto')

# Fit the model to the data
model.fit(df["Amount"].values.reshape(-1,1))

# Get the outlier scores
outlier_scores = model.decision_function(df["Amount"].values.reshape(-1,1))

# Get the indices of the outliers
outlier_indices = np.argsort(outlier_scores)[::-1][:10]

# Remove the outliers from the data
df = df.drop(outlier_indices)

sns.boxplot(df)

sns.heatmap(df.corr(),cmap="viridis",annot=True)

df

# Select the features to be used for anomaly detection
features = ["Amount", "Time", "User"]

# Create a new dataframe with the selected features
X = df[features]

"""4."""

model = IsolationForest()
model.fit(X)
y_pred = model.predict(X)

df["anomaly_score"] = model.decision_function(X)

anomalies = df.loc[df["anomaly_score"] < 0]

"""5."""

#scatter plot of suspicious activity vs posting activity
plt.scatter(df["Amount"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Amount")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

#scatter plot of suspicious activity vs social connections
plt.scatter(df["Time"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["Time"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("Time")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

#scatter plot of suspicious activity vs social connections
plt.scatter(df["User"], df["anomaly_score"], label="Not Anomaly")
plt.scatter(anomalies["User"], anomalies["anomaly_score"], color="r", label="Anomaly")
plt.xlabel("User")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()